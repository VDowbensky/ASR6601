<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\e78test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\e78test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Fri Sep 20 11:25:15 2024
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; cli_proc &rArr; ciProcessInput &rArr; validateInteger &rArr; strtoul &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[48]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">DebugMon_Handler</a><BR>
 <LI><a href="#[5c]">AFEC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">AFEC_IRQHandler</a><BR>
 <LI><a href="#[45]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">BusFault_Handler</a><BR>
 <LI><a href="#[f6]">uart_send_data</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f6]">uart_send_data</a><BR>
 <LI><a href="#[44]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">MemManage_Handler</a><BR>
 <LI><a href="#[df]">uart_receive_data</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">uart_receive_data</a><BR>
 <LI><a href="#[46]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5b]">ADC_IRQHandler</a> from adc.o(.text.ADC_IRQHandler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[5c]">AFEC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[66]">BSTIMER0_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[67]">BSTIMER1_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[45]">BusFault_Handler</a> from tremo_it.o(.text.BusFault_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[5f]">DAC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[6a]">DMA0_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[5e]">DMA1_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[48]">DebugMon_Handler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[4e]">EFC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[61]">GPIO_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[43]">HardFault_Handler</a> from tremo_it.o(.text.HardFault_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[58]">I2C0_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[59]">I2C1_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[50]">I2C2_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[6b]">I2S_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[6f]">IWDG_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[6c]">LCD_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[60]">LORA_IRQHandler</a> from radio_proc.o(.text.LORA_IRQHandler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[68]">LPTIMER0_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[6e]">LPTIMER1_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[54]">LPUART_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[44]">MemManage_Handler</a> from tremo_it.o(.text.MemManage_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[42]">NMI_Handler</a> from tremo_it.o(.text.NMI_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[6d]">PWR_IRQHandler</a> from tremo_it.o(.text.PWR_IRQHandler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[49]">PendSV_Handler</a> from tremo_it.o(.text.PendSV_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[57]">QSPI_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[4c]">RTC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[41]">Reset_Handler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[69]">SAC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[5a]">SCC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[4b]">SEC_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[55]">SSP0_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[56]">SSP1_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[5d]">SSP2_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[47]">SVC_Handler</a> from tremo_it.o(.text.SVC_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[4a]">SysTick_Handler</a> from tremo_it.o(.text.SysTick_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_tremo.o(.text.SystemInit) referenced from startup_tremo.o(.text)
 <LI><a href="#[62]">TIMER0_IRQHandler</a> from ustimer.o(.text.TIMER0_IRQHandler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[63]">TIMER1_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[64]">TIMER2_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[65]">TIMER3_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[51]">UART0_IRQHandler</a> from uart.o(.text.UART0_IRQHandler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[52]">UART1_IRQHandler</a> from uart.o(.text.UART1_IRQHandler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[53]">UART2_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[4f]">UART3_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[46]">UsageFault_Handler</a> from tremo_it.o(.text.UsageFault_Handler) referenced from startup_tremo.o(RESET)
 <LI><a href="#[4d]">WDG_IRQHandler</a> from startup_tremo.o(.text) referenced from startup_tremo.o(RESET)
 <LI><a href="#[72]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_tremo.o(.text)
 <LI><a href="#[5]">cli_aesenable</a> from app_cli.o(.text.cli_aesenable) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3b]">cli_dumpregs</a> from app_cli.o(.text.cli_dumpregs) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[28]">cli_fs_getaddr</a> from app_cli.o(.text.cli_fs_getaddr) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2c]">cli_fs_getcrcwhite</a> from app_cli.o(.text.cli_fs_getcrcwhite) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[24]">cli_fs_getmodparams</a> from app_cli.o(.text.cli_fs_getmodparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[26]">cli_fs_getpacketparams</a> from app_cli.o(.text.cli_fs_getpacketparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2a]">cli_fs_getsync</a> from app_cli.o(.text.cli_fs_getsync) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[29]">cli_fs_setaddr</a> from app_cli.o(.text.cli_fs_setaddr) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2d]">cli_fs_setcrcwhite</a> from app_cli.o(.text.cli_fs_setcrcwhite) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[25]">cli_fs_setmodparams</a> from app_cli.o(.text.cli_fs_setmodparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[27]">cli_fs_setpacketparams</a> from app_cli.o(.text.cli_fs_setpacketparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2b]">cli_fs_setsync</a> from app_cli.o(.text.cli_fs_setsync) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[16]">cli_getRSSI</a> from app_cli.o(.text.cli_getRSSI) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[6]">cli_getaeskey</a> from app_cli.o(.text.cli_getaeskey) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[30]">cli_getautosendparams</a> from app_cli.o(.text.cli_getautosendparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[f]">cli_getchannel</a> from app_cli.o(.text.cli_getchannel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3]">cli_getdevid</a> from app_cli.o(.text.cli_getdevid) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[d]">cli_getfreq</a> from app_cli.o(.text.cli_getfreq) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[36]">cli_getgpsdata</a> from app_cli.o(.text.cli_getgpsdata) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[9]">cli_getmodem</a> from app_cli.o(.text.cli_getmodem) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[b]">cli_getopmode</a> from app_cli.o(.text.cli_getopmode) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[12]">cli_getpower</a> from app_cli.o(.text.cli_getpower) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[14]">cli_getramptime</a> from app_cli.o(.text.cli_getramptime) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[35]">cli_getrxcount</a> from app_cli.o(.text.cli_getrxcount) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[19]">cli_getsleepparams</a> from app_cli.o(.text.cli_getsleepparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1b]">cli_getstatus</a> from app_cli.o(.text.cli_getstatus) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[17]">cli_gettimeouts</a> from app_cli.o(.text.cli_gettimeouts) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2]">cli_getver</a> from app_cli.o(.text.cli_getver) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[37]">cli_getvt</a> from app_cli.o(.text.cli_getvt) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1]">cli_info</a> from app_cli.o(.text.cli_info) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3e]">cli_initconfig</a> from app_cli.o(.text.cli_initconfig) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1c]">cli_lr_getmodparams</a> from app_cli.o(.text.cli_lr_getmodparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1e]">cli_lr_getpacketparams</a> from app_cli.o(.text.cli_lr_getpacketparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[22]">cli_lr_getsymboltimeout</a> from app_cli.o(.text.cli_lr_getsymboltimeout) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[20]">cli_lr_getsync</a> from app_cli.o(.text.cli_lr_getsync) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1d]">cli_lr_setmodparams</a> from app_cli.o(.text.cli_lr_setmodparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1f]">cli_lr_setpacketparams</a> from app_cli.o(.text.cli_lr_setpacketparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[23]">cli_lr_setsymboltimeout</a> from app_cli.o(.text.cli_lr_setsymboltimeout) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[21]">cli_lr_setsync</a> from app_cli.o(.text.cli_lr_setsync) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[39]">cli_readreg</a> from app_cli.o(.text.cli_readreg) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[0]">cli_reset</a> from app_cli.o(.text.cli_reset) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2e]">cli_sendburst</a> from app_cli.o(.text.cli_sendburst) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[8]">cli_setaesiv</a> from app_cli.o(.text.cli_setaesiv) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[7]">cli_setaeskey</a> from app_cli.o(.text.cli_setaeskey) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[31]">cli_setautosendparams</a> from app_cli.o(.text.cli_setautosendparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[10]">cli_setchannel</a> from app_cli.o(.text.cli_setchannel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[4]">cli_setdevid</a> from app_cli.o(.text.cli_setdevid) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[38]">cli_setem</a> from app_cli.o(.text.cli_setem) referenced 4 times from app_cli.o(.data.commands)
 <LI><a href="#[e]">cli_setfreq</a> from app_cli.o(.text.cli_setfreq) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[a]">cli_setmodem</a> from app_cli.o(.text.cli_setmodem) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[c]">cli_setopmode</a> from app_cli.o(.text.cli_setopmode) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[40]">cli_setpaconfig</a> from app_cli.o(.text.cli_setpaconfig) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[13]">cli_setpower</a> from app_cli.o(.text.cli_setpower) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[15]">cli_setramptime</a> from app_cli.o(.text.cli_setramptime) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1a]">cli_setsleepparams</a> from app_cli.o(.text.cli_setsleepparams) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[18]">cli_settimeouts</a> from app_cli.o(.text.cli_settimeouts) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[33]">cli_startrxcount</a> from app_cli.o(.text.cli_startrxcount) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2f]">cli_stopburst</a> from app_cli.o(.text.cli_stopburst) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[34]">cli_stoprxcount</a> from app_cli.o(.text.cli_stoprxcount) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[11]">cli_storechannel</a> from app_cli.o(.text.cli_storechannel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3f]">cli_storeconfig</a> from app_cli.o(.text.cli_storeconfig) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3d]">cli_sweeprx</a> from app_cli.o(.text.cli_sweeprx) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3c]">cli_sweeptx</a> from app_cli.o(.text.cli_sweeptx) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[32]">cli_txstream</a> from app_cli.o(.text.cli_txstream) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3a]">cli_writereg</a> from app_cli.o(.text.cli_writereg) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[73]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[70]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[130]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[41]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>AFEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFEC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFEC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>BSTIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>BSTIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>DMA1IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>LPTIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>WDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tremo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_bytes
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypto
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_init
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfig
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[e4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateInteger
</UL>

<P><STRONG><a name="[e8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[119]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[11a]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[76]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[78]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetSigned
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateInteger
</UL>

<P><STRONG><a name="[7c]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateInteger
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_value
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_value
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_value
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getvt
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getRSSI
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRxPacket
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_value
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[136]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[137]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[138]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[77]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[7a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[139]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[13a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[80]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[13c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>ADC_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, adc.o(.text.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADC_IRQHandler &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clear_interrupt_status
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_interrupt_status
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LORA_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, radio_proc.o(.text.LORA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LORA_IRQHandler &rArr; SX126X_ClearIrqStatus &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_ClearIrqStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetIrqStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>PWR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.PWR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>RETARGET_ReadChar</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, retarget.o(.text.RETARGET_ReadChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RETARGET_ReadChar &rArr; myuart_init &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_proc
</UL>

<P><STRONG><a name="[9c]"></a>RETARGET_SerialInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, retarget.o(.text.RETARGET_SerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RETARGET_SerialInit &rArr; myuart_init &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_peripherals
</UL>

<P><STRONG><a name="[47]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SX126X_CalibrateImage</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_CalibrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_CalibrateImage &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[99]"></a>SX126X_ClearIrqStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_ClearIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_ClearIrqStatus &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>SX126X_FskConfig</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, sx126x_proc.o(.text.SX126X_FskConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetBufferBaseAddress
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskCrcWhitening
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskSyncWord
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskAddr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskPacketParams
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskModParams
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[a8]"></a>SX126X_GetFskPacketStatus</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sx126x.o(.text.SX126X_GetFskPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126X_GetFskPacketStatus &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[98]"></a>SX126X_GetIrqStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_GetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_GetIrqStatus &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>SX126X_GetLoRaPacketStatus</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sx126x.o(.text.SX126X_GetLoRaPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126X_GetLoRaPacketStatus &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[ab]"></a>SX126X_GetRssiInst</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_GetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_GetRssiInst &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getRSSI
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[ac]"></a>SX126X_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_GetStatus &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getstatus
</UL>

<P><STRONG><a name="[ad]"></a>SX126X_LoRaConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sx126x_proc.o(.text.SX126X_LoRaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX126X_LoRaConfig &rArr; SX126X_SetLoRaPacketParams &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetBufferBaseAddress
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaPacketParams
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaModParams
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[a2]"></a>SX126X_SetBufferBaseAddress</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetBufferBaseAddress &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
</UL>

<P><STRONG><a name="[b1]"></a>SX126X_SetCW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(.text.SX126X_SetCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX126X_SetCW &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_rfsw_tx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
</UL>

<P><STRONG><a name="[a1]"></a>SX126X_SetChannel</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sx126x_proc.o(.text.SX126X_SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRfFrequency
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeprx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setchannel
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setfreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
</UL>

<P><STRONG><a name="[b4]"></a>SX126X_SetDIO2AsRfSwitchCtrl</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetDIO2AsRfSwitchCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetDIO2AsRfSwitchCtrl &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[b5]"></a>SX126X_SetDioIrqParams</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetDioIrqParams &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[b6]"></a>SX126X_SetFs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sx126x.o(.text.SX126X_SetFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX126X_SetFs &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
</UL>

<P><STRONG><a name="[a6]"></a>SX126X_SetFskAddr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx126x.o(.text.SX126X_SetFskAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126X_SetFskAddr &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
</UL>

<P><STRONG><a name="[a7]"></a>SX126X_SetFskCrcWhitening</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetFskCrcWhitening))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126X_SetFskCrcWhitening &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
</UL>

<P><STRONG><a name="[a3]"></a>SX126X_SetFskModParams</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sx126x.o(.text.SX126X_SetFskModParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126X_SetFskModParams &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
</UL>

<P><STRONG><a name="[a4]"></a>SX126X_SetFskPacketParams</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sx126x.o(.text.SX126X_SetFskPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126X_SetFskPacketParams &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
</UL>

<P><STRONG><a name="[a5]"></a>SX126X_SetFskSyncWord</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetFskSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126X_SetFskSyncWord &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
</UL>

<P><STRONG><a name="[ae]"></a>SX126X_SetLoRaModParams</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetLoRaModParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126X_SetLoRaModParams &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
</UL>

<P><STRONG><a name="[af]"></a>SX126X_SetLoRaPacketParams</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx126x.o(.text.SX126X_SetLoRaPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126X_SetLoRaPacketParams &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
</UL>

<P><STRONG><a name="[b8]"></a>SX126X_SetPaConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetPaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetPaConfig &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpaconfig
</UL>

<P><STRONG><a name="[a0]"></a>SX126X_SetPacketType</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetPacketType &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
</UL>

<P><STRONG><a name="[b9]"></a>SX126X_SetRegulatorMode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetRegulatorMode &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[b3]"></a>SX126X_SetRfFrequency</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetRfFrequency &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
</UL>

<P><STRONG><a name="[ba]"></a>SX126X_SetRx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetRx &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_rfsw_rx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[bc]"></a>SX126X_SetSleep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetSleep &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
</UL>

<P><STRONG><a name="[bd]"></a>SX126X_SetStandby</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetStandby &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[be]"></a>SX126X_SetTx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_SetTx &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_rfsw_tx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
</UL>

<P><STRONG><a name="[bf]"></a>SX126X_SetTxInfinitePreamble</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(.text.SX126X_SetTxInfinitePreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX126X_SetTxInfinitePreamble &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_rfsw_tx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
</UL>

<P><STRONG><a name="[c0]"></a>SX126X_SetTxParams</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sx126x.o(.text.SX126X_SetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126X_SetTxParams &rArr; SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setramptime
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpower
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[c1]"></a>SX126X_Wakeup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx126x_interface.o(.text.SX126X_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126X_Wakeup &rArr; lorac_wait_on_busy &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_wait_on_busy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[c5]"></a>SX126X_config</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, sx126x_proc.o(.text.SX126X_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxParams
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_Wakeup
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetDIO2AsRfSwitchCtrl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetDioIrqParams
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_CalibrateImage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRegulatorMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetStandby
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setcrcwhite
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setsync
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setaddr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setpacketparams
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setmodparams
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setpacketparams
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setmodparams
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_settimeouts
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setmodem
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[c7]"></a>SX126X_initconfigstructure</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, sx126x_proc.o(.text.SX126X_initconfigstructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126X_initconfigstructure &rArr; writeconfig &rArr; flash_program_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_initconfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[c9]"></a>SX126X_readBuffer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sx126x_interface.o(.text.SX126X_readBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126X_readBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[a9]"></a>SX126X_readCmd</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sx126x_interface.o(.text.SX126X_readCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetRssiInst
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetIrqStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetFskPacketStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetLoRaPacketStatus
</UL>

<P><STRONG><a name="[b7]"></a>SX126X_readReg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx126x_interface.o(.text.SX126X_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_readReg &rArr; SX126X_readRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_dumpregs
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readreg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxParams
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaPacketParams
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskCrcWhitening
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaModParams
</UL>

<P><STRONG><a name="[ca]"></a>SX126X_readRegs</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sx126x_interface.o(.text.SX126X_readRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX126X_readRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
</UL>

<P><STRONG><a name="[bb]"></a>SX126X_rfsw_rx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx126x_interface.o(.text.SX126X_rfsw_rx))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_rfsw_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRx
</UL>

<P><STRONG><a name="[b2]"></a>SX126X_rfsw_tx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx126x_interface.o(.text.SX126X_rfsw_tx))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_rfsw_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxInfinitePreamble
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetCW
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTx
</UL>

<P><STRONG><a name="[cd]"></a>SX126X_setopmode</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, sx126x_proc.o(.text.SX126X_setopmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_setopmode &rArr; SX126X_SetRx &rArr; SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxInfinitePreamble
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetCW
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetStandby
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setopmode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[ce]"></a>SX126X_writeBuffer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sx126x_interface.o(.text.SX126X_writeBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126X_writeBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparepacketcommon
</UL>

<P><STRONG><a name="[9e]"></a>SX126X_writeCmd</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sx126x_interface.o(.text.SX126X_writeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX126X_writeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetPaConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxParams
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetBufferBaseAddress
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaPacketParams
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskPacketParams
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaModParams
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskModParams
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetPacketType
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRfFrequency
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetDIO2AsRfSwitchCtrl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetDioIrqParams
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_CalibrateImage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRegulatorMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxInfinitePreamble
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetCW
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetStandby
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetSleep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_ClearIrqStatus
</UL>

<P><STRONG><a name="[b0]"></a>SX126X_writeReg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx126x_interface.o(.text.SX126X_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX126X_writeReg &rArr; SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_writereg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxParams
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_LoRaConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaPacketParams
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskCrcWhitening
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskSyncWord
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetFskAddr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetLoRaModParams
</UL>

<P><STRONG><a name="[cf]"></a>SX126X_writeRegs</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sx126x_interface.o(.text.SX126X_writeRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX126X_writeRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
</UL>

<P><STRONG><a name="[4a]"></a>SysTick_Handler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tremo_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kickADC
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_tremo.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit &rArr; delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ustimer.o(.text.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_status
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler &rArr; cbRETARGET_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbRETARGET_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tremo_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tremo.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>adc_clear_interrupt_status</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_clear_interrupt_status))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>adc_config_clock_division</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_config_clock_division))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[10d]"></a>adc_config_conv_mode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_config_conv_mode))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[10f]"></a>adc_config_interrupt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_config_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[10a]"></a>adc_config_ref_voltage</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_config_ref_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[10c]"></a>adc_config_sample_sequence</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tremo_adc.o(.text.adc_config_sample_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_config_sample_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[10e]"></a>adc_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[10b]"></a>adc_enable_vbat31</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_enable_vbat31))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[d5]"></a>adc_get_calibration_value</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tremo_adc.o(.text.adc_get_calibration_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = adc_get_calibration_value &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[92]"></a>adc_get_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>adc_get_interrupt_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_get_interrupt_status))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>adc_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_init &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[91]"></a>adc_start</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tremo_adc.o(.text.adc_start))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kickADC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>aes_crypto</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, aes.o(.text.aes_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_crypto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[d9]"></a>aes_decrypt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes_proc.o(.text.aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_decrypt &rArr; aes_crypto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypto
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[da]"></a>aes_encrypt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aes_proc.o(.text.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_encrypt &rArr; aes_crypto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypto
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparepacketcommon
</UL>

<P><STRONG><a name="[db]"></a>aes_init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, aes.o(.text.aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_proc_init
</UL>

<P><STRONG><a name="[dc]"></a>aes_proc_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aes_proc.o(.text.aes_proc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_proc_init &rArr; aes_init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_peripheral_clk
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[d4]"></a>cbRETARGET_Rx</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, retarget.o(.text.cbRETARGET_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cbRETARGET_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_flag_status
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>ciErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_cli.o(.text.ciErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ciErrorCallback &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[e1]"></a>ciGetSigned</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciGetSigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ciGetSigned &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpower
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setchannel
</UL>

<P><STRONG><a name="[e2]"></a>ciGetUnsigned</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciGetUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpaconfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeprx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_dumpregs
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_writereg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readreg
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setautosendparams
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sendburst
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setcrcwhite
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setsync
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setaddr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setpacketparams
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setmodparams
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setsync
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setpacketparams
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setmodparams
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_settimeouts
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setramptime
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setfreq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setopmode
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setmodem
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setaesiv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setaeskey
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_aesenable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setdevid
</UL>

<P><STRONG><a name="[ed]"></a>ciInitState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciInitState))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
</UL>

<P><STRONG><a name="[e3]"></a>ciPrintHelp</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, command_interpreter.o(.text.ciPrintHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ciPrintHelp &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[e6]"></a>ciProcessInput</STRONG> (Thumb, 700 bytes, Stack size 144 bytes, command_interpreter.o(.text.ciProcessInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ciProcessInput &rArr; validateInteger &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciErrorCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateInteger
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_proc
</UL>

<P><STRONG><a name="[5]"></a>cli_aesenable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_cli.o(.text.cli_aesenable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_aesenable &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3b]"></a>cli_dumpregs</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_cli.o(.text.cli_dumpregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cli_dumpregs &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[28]"></a>cli_fs_getaddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_cli.o(.text.cli_fs_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_fs_getaddr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2c]"></a>cli_fs_getcrcwhite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_cli.o(.text.cli_fs_getcrcwhite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_fs_getcrcwhite &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[24]"></a>cli_fs_getmodparams</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_cli.o(.text.cli_fs_getmodparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_fs_getmodparams &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[26]"></a>cli_fs_getpacketparams</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, app_cli.o(.text.cli_fs_getpacketparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cli_fs_getpacketparams &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2a]"></a>cli_fs_getsync</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_cli.o(.text.cli_fs_getsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_fs_getsync &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[29]"></a>cli_fs_setaddr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_cli.o(.text.cli_fs_setaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cli_fs_setaddr &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2d]"></a>cli_fs_setcrcwhite</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, app_cli.o(.text.cli_fs_setcrcwhite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cli_fs_setcrcwhite &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[25]"></a>cli_fs_setmodparams</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, app_cli.o(.text.cli_fs_setmodparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cli_fs_setmodparams &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[27]"></a>cli_fs_setpacketparams</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, app_cli.o(.text.cli_fs_setpacketparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cli_fs_setpacketparams &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2b]"></a>cli_fs_setsync</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, app_cli.o(.text.cli_fs_setsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cli_fs_setsync &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[16]"></a>cli_getRSSI</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cli_getRSSI &rArr; SX126X_GetRssiInst &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetRssiInst
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[6]"></a>cli_getaeskey</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, app_cli.o(.text.cli_getaeskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_getaeskey &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[30]"></a>cli_getautosendparams</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getautosendparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getautosendparams &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[f]"></a>cli_getchannel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getchannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getchannel &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3]"></a>cli_getdevid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getdevid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getdevid &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[d]"></a>cli_getfreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getfreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getfreq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[36]"></a>cli_getgpsdata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getgpsdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getgpsdata &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[9]"></a>cli_getmodem</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getmodem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getmodem &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[b]"></a>cli_getopmode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getopmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getopmode &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[12]"></a>cli_getpower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getpower &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[14]"></a>cli_getramptime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getramptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getramptime &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[35]"></a>cli_getrxcount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getrxcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getrxcount &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[19]"></a>cli_getsleepparams</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getsleepparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getsleepparams &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1b]"></a>cli_getstatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cli_getstatus &rArr; SX126X_GetStatus &rArr; SX126X_readCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[17]"></a>cli_gettimeouts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_cli.o(.text.cli_gettimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_gettimeouts &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2]"></a>cli_getver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getver))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_getver &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[37]"></a>cli_getvt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_cli.o(.text.cli_getvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getvt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1]"></a>cli_info</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_cli.o(.text.cli_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[ec]"></a>cli_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_cli.o(.text.cli_init))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciInitState
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>cli_initconfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_cli.o(.text.cli_initconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cli_initconfig &rArr; SX126X_initconfigstructure &rArr; writeconfig &rArr; flash_program_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_initconfigstructure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1c]"></a>cli_lr_getmodparams</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, app_cli.o(.text.cli_lr_getmodparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_lr_getmodparams &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1e]"></a>cli_lr_getpacketparams</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, app_cli.o(.text.cli_lr_getpacketparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_lr_getpacketparams &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[22]"></a>cli_lr_getsymboltimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_lr_getsymboltimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_lr_getsymboltimeout &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[20]"></a>cli_lr_getsync</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_cli.o(.text.cli_lr_getsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_lr_getsync &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1d]"></a>cli_lr_setmodparams</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, app_cli.o(.text.cli_lr_setmodparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cli_lr_setmodparams &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1f]"></a>cli_lr_setpacketparams</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, app_cli.o(.text.cli_lr_setpacketparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cli_lr_setpacketparams &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[23]"></a>cli_lr_setsymboltimeout</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_cli.o(.text.cli_lr_setsymboltimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_lr_setsymboltimeout &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[21]"></a>cli_lr_setsync</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_cli.o(.text.cli_lr_setsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_lr_setsync &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[ee]"></a>cli_proc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_cli.o(.text.cli_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cli_proc &rArr; ciProcessInput &rArr; validateInteger &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_ReadChar
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>cli_readreg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_cli.o(.text.cli_readreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_readreg &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readReg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[0]"></a>cli_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_cli.o(.text.cli_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_reset &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2e]"></a>cli_sendburst</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, app_cli.o(.text.cli_sendburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_sendburst &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_startburst
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[8]"></a>cli_setaesiv</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_cli.o(.text.cli_setaesiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cli_setaesiv &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[7]"></a>cli_setaeskey</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, app_cli.o(.text.cli_setaeskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cli_setaeskey &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[31]"></a>cli_setautosendparams</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_cli.o(.text.cli_setautosendparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_setautosendparams &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[10]"></a>cli_setchannel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setchannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cli_setchannel &rArr; ciGetSigned &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetSigned
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[4]"></a>cli_setdevid</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setdevid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_setdevid &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[38]"></a>cli_setem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_setem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_setem &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[e]"></a>cli_setfreq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_cli.o(.text.cli_setfreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_setfreq &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[a]"></a>cli_setmodem</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setmodem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cli_setmodem &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[c]"></a>cli_setopmode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setopmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_setopmode &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[40]"></a>cli_setpaconfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_cli.o(.text.cli_setpaconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_setpaconfig &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetPaConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[13]"></a>cli_setpower</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cli_setpower &rArr; ciGetSigned &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxParams
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetSigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[15]"></a>cli_setramptime</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setramptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_setramptime &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetTxParams
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1a]"></a>cli_setsleepparams</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_setsleepparams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_setsleepparams &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[18]"></a>cli_settimeouts</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_cli.o(.text.cli_settimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cli_settimeouts &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[33]"></a>cli_startrxcount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_startrxcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_startrxcount &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[2f]"></a>cli_stopburst</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_cli.o(.text.cli_stopburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_stopburst &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[34]"></a>cli_stoprxcount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_stoprxcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_stoprxcount &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[11]"></a>cli_storechannel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_cli.o(.text.cli_storechannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cli_storechannel &rArr; writeconfig &rArr; flash_program_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3f]"></a>cli_storeconfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_cli.o(.text.cli_storeconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cli_storeconfig &rArr; writeconfig &rArr; flash_program_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3d]"></a>cli_sweeprx</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_cli.o(.text.cli_sweeprx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_sweeprx &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_setinterval
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3c]"></a>cli_sweeptx</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, app_cli.o(.text.cli_sweeptx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cli_sweeptx &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_setinterval
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[32]"></a>cli_txstream</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, app_cli.o(.text.cli_txstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cli_txstream &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_FskConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3a]"></a>cli_writereg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_cli.o(.text.cli_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_writereg &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeReg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[d1]"></a>delay_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, tremo_delay.o(.text.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_get_clk_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
</UL>

<P><STRONG><a name="[96]"></a>delay_ms</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tremo_delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>delay_us</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tremo_delay.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_Wakeup
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_wait_on_busy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_reset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_init
</UL>

<P><STRONG><a name="[123]"></a>flash_erase_page</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, tremo_flash.o(.text.flash_erase_page))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
</UL>

<P><STRONG><a name="[f5]"></a>flash_program_bytes</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, tremo_flash.o(.text.flash_program_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_program_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeconfig
</UL>

<P><STRONG><a name="[73]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_flag_status
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[103]"></a>gpio_init</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, tremo_gpio.o(.text.gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_init
</UL>

<P><STRONG><a name="[102]"></a>gpio_set_iomux</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tremo_gpio.o(.text.gpio_set_iomux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set_iomux
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_init
</UL>

<P><STRONG><a name="[94]"></a>gpio_write</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, tremo_gpio.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kickADC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_rfsw_tx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_rfsw_rx
</UL>

<P><STRONG><a name="[f7]"></a>init_peripherals</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(.text.init_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_peripherals &rArr; myadc_init &rArr; adc_get_calibration_value &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>init_power_clk</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp.o(.text.init_power_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_power_clk &rArr; delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_peripheral_clk
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_set_systick_source
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_set_pclk_div
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_set_hclk_div
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_set_sys_clk_source
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_oscillator
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>kickADC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text.kickADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kickADC
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[106]"></a>led_off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.led_off))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>led_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.led_on))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>lorac_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lorac.o(.text.lorac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lorac_init &rArr; gpio_set_iomux
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_iomux
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[c6]"></a>lorac_reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lorac.o(.text.lorac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorac_reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
</UL>

<P><STRONG><a name="[cb]"></a>lorac_rfsw_rx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lorac.o(.text.lorac_rfsw_rx))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_rfsw_rx
</UL>

<P><STRONG><a name="[cc]"></a>lorac_rfsw_tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lorac.o(.text.lorac_rfsw_tx))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_rfsw_tx
</UL>

<P><STRONG><a name="[c3]"></a>lorac_transfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lorac.o(.text.lorac_transfer))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readRegs
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeRegs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_Wakeup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeBuffer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readBuffer
</UL>

<P><STRONG><a name="[c4]"></a>lorac_wait_on_busy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lorac.o(.text.lorac_wait_on_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorac_wait_on_busy &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_Wakeup
</UL>

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; cli_proc &rArr; ciProcessInput &rArr; validateInteger &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_proc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_peripherals
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f9]"></a>myadc_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, adc.o(.text.myadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = myadc_init &rArr; adc_get_calibration_value &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_set_adc_clk_source
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config_ref_voltage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_vbat31
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_value
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config_interrupt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config_sample_sequence
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config_conv_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config_clock_division
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_peripheral_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_peripherals
</UL>

<P><STRONG><a name="[f8]"></a>mygpio_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(.text.mygpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mygpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_peripheral_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_peripherals
</UL>

<P><STRONG><a name="[9b]"></a>myuart_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, uart.o(.text.myuart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = myuart_init &rArr; uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_set_uart0_clk_source
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_iomux
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_peripheral_clk
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_ReadChar
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>

<P><STRONG><a name="[115]"></a>preparepacketcommon</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, radio_proc.o(.text.preparepacketcommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = preparepacketcommon &rArr; aes_encrypt &rArr; aes_crypto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_writeBuffer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[116]"></a>printRxPacket</STRONG> (Thumb, 208 bytes, Stack size 168 bytes, radio_proc.o(.text.printRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = printRxPacket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
</UL>

<P><STRONG><a name="[105]"></a>radio_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, radio_proc.o(.text.radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = radio_init &rArr; SX126X_config &rArr; SX126X_FskConfig &rArr; SX126X_SetChannel &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_initconfigstructure
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_proc_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readconfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>radio_proc</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, radio_proc.o(.text.radio_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = radio_proc &rArr; printRxPacket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetRssiInst
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_SetChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_setopmode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRxPacket
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_readBuffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetFskPacketStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_GetLoRaPacketStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preparepacketcommon
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>radio_startburst</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, radio_proc.o(.text.radio_startburst))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sendburst
</UL>

<P><STRONG><a name="[fc]"></a>rcc_enable_oscillator</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_enable_oscillator))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
</UL>

<P><STRONG><a name="[dd]"></a>rcc_enable_peripheral_clk</STRONG> (Thumb, 1320 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_enable_peripheral_clk))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mygpio_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_proc_init
</UL>

<P><STRONG><a name="[f4]"></a>rcc_get_clk_freq</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_get_clk_freq))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11c]"></a>rcc_get_uart0_clk_source</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_get_uart0_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11b]"></a>rcc_get_uart1_clk_source</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_get_uart1_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11d]"></a>rcc_get_uart2_clk_source</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_get_uart2_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11e]"></a>rcc_get_uart3_clk_source</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_get_uart3_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[108]"></a>rcc_set_adc_clk_source</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_set_adc_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myadc_init
</UL>

<P><STRONG><a name="[fe]"></a>rcc_set_hclk_div</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_set_hclk_div))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
</UL>

<P><STRONG><a name="[ff]"></a>rcc_set_pclk_div</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_set_pclk_div))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
</UL>

<P><STRONG><a name="[fd]"></a>rcc_set_sys_clk_source</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_set_sys_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
</UL>

<P><STRONG><a name="[100]"></a>rcc_set_systick_source</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_set_systick_source))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_power_clk
</UL>

<P><STRONG><a name="[110]"></a>rcc_set_uart0_clk_source</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tremo_rcc.o(.text.rcc_set_uart0_clk_source))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>

<P><STRONG><a name="[117]"></a>readconfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(.text.readconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readconfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>

<P><STRONG><a name="[e7]"></a>strtok_r</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, command_interpreter.o(.text.strtok_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = strtok_r &rArr; strcspn
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[d3]"></a>timer_clear_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tremo_timer.o(.text.timer_clear_status))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>timer_cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tremo_timer.o(.text.timer_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
</UL>

<P><STRONG><a name="[11f]"></a>timer_config_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_timer.o(.text.timer_config_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
</UL>

<P><STRONG><a name="[121]"></a>timer_generate_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_timer.o(.text.timer_generate_event))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
</UL>

<P><STRONG><a name="[d2]"></a>timer_get_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_timer.o(.text.timer_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>timer_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, tremo_timer.o(.text.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustimer_init
</UL>

<P><STRONG><a name="[113]"></a>uart_cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tremo_uart.o(.text.uart_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>

<P><STRONG><a name="[111]"></a>uart_config_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tremo_uart.o(.text.uart_config_init))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>

<P><STRONG><a name="[114]"></a>uart_config_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tremo_uart.o(.text.uart_config_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>

<P><STRONG><a name="[de]"></a>uart_get_flag_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tremo_uart.o(.text.uart_get_flag_status))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbRETARGET_Rx
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[112]"></a>uart_init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, tremo_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_get_uart3_clk_source
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_get_uart2_clk_source
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_get_uart1_clk_source
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_get_uart0_clk_source
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_get_clk_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myuart_init
</UL>

<P><STRONG><a name="[df]"></a>uart_receive_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tremo_uart.o(.text.uart_receive_data))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_data
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbRETARGET_Rx
</UL>

<P><STRONG><a name="[f6]"></a>uart_send_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tremo_uart.o(.text.uart_send_data))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[fa]"></a>ustimer_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ustimer.o(.text.ustimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ustimer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_enable_peripheral_clk
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_generate_event
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config_interrupt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_peripherals
</UL>

<P><STRONG><a name="[f1]"></a>ustimer_setinterval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ustimer.o(.text.ustimer_setinterval))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeprx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
</UL>

<P><STRONG><a name="[f2]"></a>ustimer_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ustimer.o(.text.ustimer_start))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeprx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
</UL>

<P><STRONG><a name="[f3]"></a>ustimer_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ustimer.o(.text.ustimer_stop))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeprx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
</UL>

<P><STRONG><a name="[c8]"></a>writeconfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash.o(.text.writeconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = writeconfig &rArr; flash_program_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program_bytes
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storeconfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_initconfigstructure
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storechannel
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setdevid
</UL>

<P><STRONG><a name="[124]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpaconfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_initconfig
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_dumpregs
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_writereg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readreg
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getvt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setautosendparams
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getautosendparams
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sendburst
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setcrcwhite
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_getcrcwhite
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setsync
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_getsync
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setaddr
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_getaddr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setpacketparams
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_getpacketparams
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setmodparams
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_getmodparams
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setsync
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_getsync
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setpacketparams
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_getpacketparams
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setmodparams
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_getmodparams
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getstatus
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_settimeouts
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_gettimeouts
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getRSSI
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setramptime
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getramptime
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpower
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getpower
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storechannel
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setchannel
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchannel
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setfreq
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getfreq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getaeskey
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setdevid
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getdevid
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getver
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_info
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRxPacket
</UL>

<P><STRONG><a name="[13f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[140]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateInteger
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[141]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[143]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[144]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[95]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciErrorCallback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storeconfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126X_initconfigstructure
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_initconfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeprx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sweeptx
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_dumpregs
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setem
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getgpsdata
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getrxcount
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_stoprxcount
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_startrxcount
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_stopburst
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setcrcwhite
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setsync
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setaddr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setpacketparams
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_getpacketparams
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_fs_setmodparams
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setsymboltimeout
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_getsymboltimeout
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setsync
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setpacketparams
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_getpacketparams
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_setmodparams
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_lr_getmodparams
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setsleepparams
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getsleepparams
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setopmode
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getopmode
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setmodem
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getmodem
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setaesiv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setaeskey
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_aesenable
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_proc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[97]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tremo_it.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[ef]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_cli.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
</UL>

<P><STRONG><a name="[ea]"></a>validateInteger</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, command_interpreter.o(.text.validateInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = validateInteger &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[126]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[125]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[129]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[128]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
